@* @page "/students/edit/{StudentId:int}"
@inject HttpClient http
@inject NavigationManager navigationManager
@using  System.Text.Json
@using BlazorMasterDetail.Shared; *@

@* <h3>Edit Student</h3> *@

@* @if (student == null)
{
    <text>There are no records to show</text>
}
else
{
    <StudentsForm student="student" OnValidSubmit="OnValidSubmit" />
}

@code {
    [Parameter] public int StudentId { get; set; }
    private Student student;

    protected async override Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"api/students/{StudentId}");

        if (response.IsSuccessStatusCode)
        {
            student = JsonSerializer.Deserialize<Student>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            // Error, likely a 404
            navigationManager.NavigateTo("students");
        }
    }

    private async Task OnValidSubmit()
    {
        var response = await http.PutAsJsonAsync("api/students", student);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("students");
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }

}
 *@


@page "/students/edit/{StudentId:int}"
@inject HttpClient http
@inject NavigationManager navigationManager
@using System.Text.Json
@using BlazorMasterDetail.Shared;

@if (student == null)
{
    <text>There are no records to show</text>
}
else
{
    <StudentsForm student="student" OnValidSubmit="OnValidSubmit" mode="edit" />
}

@code {
    [Parameter] public int StudentId { get; set; }
    private Student student;

    protected async override Task OnInitializedAsync()
    {
        var response = await http.GetAsync($"api/students/{StudentId}");

        if (response.IsSuccessStatusCode)
        {
            student = JsonSerializer.Deserialize<Student>(await response.Content.ReadAsStringAsync(), new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            // Error, likely a 404
            navigationManager.NavigateTo("students");
        }
    }

    private async Task OnValidSubmit()
    {
        var response = await http.PutAsJsonAsync("api/students", student);

        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("students");
        }
        else
        {
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }
}
